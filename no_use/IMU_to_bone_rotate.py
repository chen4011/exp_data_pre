from scipy.spatial.transform import Rotation as R

bones = [
    # 'Head','Sternum',
    'Pelvis', 'L_UpArm', 'R_UpArm', 'L_LowArm', 'R_LowArm', 'L_UpLeg', 'R_UpLeg', 'L_LowLeg', 'R_LowLeg']
# 011T pose
# imu_bone_angle = {
#     # 'Sternum': [-0.88336121849126259, 0.71329284220504041, 2.2806340988420541],
#     'Pelvis': [-1.6719753656010201, -1.3294844933728558, -0.14306762586474445],
#     'L_UpArm': [-3.0712131821748008, -0.14047168415199052, -1.8886395574702259], 'R_UpArm': [0.25196939821424763, -0.22671453658039642, 2.0077430604170483],
#     'L_LowArm': [3.0803251068234085, 0.49252830338941933, -1.9725862677776753], 'R_LowArm': [0.12468078775682001, 0.36705091681702967, 2.0899981041540192],
#     'L_UpLeg': [0.037251152347828387, 0.059542989560957459, 1.5695036109832328], 'R_UpLeg': [3.1015204968913168, 0.070918993445339487, -1.6652452386371865],
#     'L_LowLeg': [0.12209467510412361, 0.34440230577895448, 1.5216737257751343], 'R_LowLeg': [2.9729901559488816, -0.58718264951370014, -1.6691080311945705]}
# 012T pose
# imu_bone_angle = {
#     # 'Sternum': [-0.88336121849126259, 0.71329284220504041, 2.2806340988420541],
#     'Pelvis': [-1.5195782381064782, -1.2340050239839075, 0.12422022568234282],
#     'L_UpArm': [2.8645085002430544, -0.19798855071893154, -1.9569448079936305], 'R_UpArm': [-0.54823211337517452, -0.49435173555931872, 2.106419357105628],
#     'L_LowArm': [2.2626186668452073, 0.30463192909723874, -1.9269656977393539], 'R_LowArm': [-0.73399494962865375, 0.019744114062376233, 1.9685462681004815],
#     'L_UpLeg': [-0.053839904344350091, 0.49183062910600045, 1.6058105875627806], 'R_UpLeg': [3.098781649103429, -0.67658163593025822, -1.5816140651098916],
#     'L_LowLeg': [0.099905245233191928, 0.26996700260645551, 1.4526820998401953], 'R_LowLeg': [2.7048322280743169, -1.024478782006478, -1.8883646854120322]}
# 013T pose
imu_bone_angle = {
    # 'Sternum': [-0.88336121849126259, 0.71329284220504041, 2.2806340988420541],
    'Pelvis': [-1.528847478340132, -1.0728048262239016, 0.13305793338641089],
    'L_UpArm': [3.0389396649800235, -0.20787276021875192, -2.1694706264497734], 'R_UpArm': [0.40375066518639519, -0.55878293085767916, 2.1853059984875673],
    'L_LowArm': [2.8069020293573779, 0.31256889193033638, -2.1926930972474743], 'R_LowArm': [0.3767099548111929, 0.046427214101605718, 2.1268748612878992],
    'L_UpLeg': [-0.11332657214631514, 0.21374612017315434, 1.4934746877608276], 'R_UpLeg': [3.0576742505976049, -0.082924776095459715, -1.5174443371626793],
    'L_LowLeg': [0.10558351922082121, 0.21444109914739581, 1.4592659598234257], 'R_LowLeg': [1.278264419477821, -1.3198877713705806, 2.9767820653039663]}

# # N pose
# imu_bone_angle = {
#     # 'Sternum': [-0.88336121849126259, 0.71329284220504041, 2.2806340988420541],
#     'Pelvis': [-1.6719753656010201, -1.3294844933728558, -0.14306762586474445],
#     'L_UpArm': [-1.109301493827578, 1.4137838123611155, -2.3550877278297513], 'R_UpArm': [-0.74660195103811056, 1.2334656789221834, 1.1547124060959066],
#     'L_LowArm': [1.6843960103340649, 1.0747730339419268, 1.0399918991800081], 'R_LowArm': [1.2579778285338123, 1.1840479616516237, -0.71559534101649325],
#     'L_UpLeg': [0.037251152375312034, 0.059542989563554471, 1.5695036110530405], 'R_UpLeg': [3.1015204968646288, 0.070918993448133058, -1.6652452387070384],
#     'L_LowLeg': [0.12209770959451757, 0.34439823357831967, 1.5216638104662634], 'R_LowLeg': [2.9729965475186071, -0.58718715117202891, -1.6690970598645347]}

# calculate quaternion(prepare for data)
rot_vb_x = 0.0
rot_vb_y = 0.0
rot_vb_z = 0.0
euler_vb = [rot_vb_x, rot_vb_y, rot_vb_z]  # euler angle in degree
r = R.from_euler('xyz', euler_vb, degrees=True) # 先繞 x 軸旋轉，然後繞 y 軸旋轉，最後繞 z 軸旋轉
R_vb_qua = r.as_quat()
q_imu_bone_vicon = dict()
with open('s1_walking2_calib_imu_bone_self.txt', 'wb') as f:
    f.write((str(len(imu_bone_angle)) + '\n').encode())  # number of bones
    for bone in bones:
        rot_x = imu_bone_angle[bone][0]
        rot_y = imu_bone_angle[bone][1]
        rot_z = imu_bone_angle[bone][2]
        euler_bi = [rot_x, rot_y, rot_z]  # euler angle in radian
        r = R.from_euler('xyz', euler_bi, degrees=False) # 先繞 x 軸旋轉，然後繞 y 軸旋轉，最後繞 z 軸旋轉
        R_bi_qua = r.as_quat()  # [x, y, z, w]
        if rot_vb_x == 0.0 and rot_vb_y == 0.0 and rot_vb_z == 0.0:
            q_Tb = R_bi_qua
        else:
            q_Tb = R_vb_qua * R_bi_qua
        # R_bi_qua = np.roll(R_bi_qua, shift=1)
        q_imu_bone_vicon[bone] = q_Tb
        f.write((bone + '\t' + str(q_Tb[0]) + '\t' + str(q_Tb[1]) + '\t'
                 + str(q_Tb[2]) + '\t' + str(q_Tb[3]) + '\n').encode())
print('=>q_imu_bone_vicon:', q_imu_bone_vicon)